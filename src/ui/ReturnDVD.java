/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchDef.java
 *
 * Created on Oct 31, 2014, 2:25:43 PM
 */

package ui;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import util.AppContext;
import static util.AppContext.* ;


/**
 *
 * @author Irshad
 */
public class ReturnDVD extends javax.swing.JPanel {

    /** Creates new form SearchDef */
    public ReturnDVD() {
        initComponents();
        ArrayList list = AppContext.dao.getAllIssuedDVDs();
        fillTable(list);
    }

    private void ReInit(){
        ArrayList list = AppContext.dao.getAllIssuedDVDs();
        fillTable(list);
    }

    DefaultTableModel dm = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int col) {
            if(col == 6 )
                return true;
            else
                return false;
        }
    };

    Vector dataRows = new Vector();
    Vector columnIdentifiers = new Vector();

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 500));
        setPreferredSize(new java.awt.Dimension(800, 500));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        columnIdentifiers.add(0, "CUSTOMER ID");
        columnIdentifiers.add(1, "CUSTOMER Name");
        columnIdentifiers.add(2, "DVD ID");
        columnIdentifiers.add(3, "DVD NAME");
        columnIdentifiers.add(4, "DVD RENT");
        columnIdentifiers.add(5, "ISSUE DATE");
        columnIdentifiers.add(6, "Details");

        dm.setDataVector(dataRows, columnIdentifiers);
        jTable1 = new JTable(dm) {
            public void tableChanged(TableModelEvent e) {
                super.tableChanged(e);
                repaint();
            }
        };
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12));
        jTable1.setModel(dm);
        jTable1.setRowHeight(25);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setText("RETURN DVD TO SYSTEM");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(286, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(294, 294, 294))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(112, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void fillTable(ArrayList list) {
        try{
            dataRows.clear();
            if(list == null || list.size()==0){
                //JOptionPane.showMessageDialog(null, " No record found.");
                dm.setDataVector(dataRows, columnIdentifiers);
                jTable1.setModel(dm);
                return;
            }
            for(int i=0; i<list.size(); i++){
                HashMap map = (HashMap) list.get(i);
                Vector row = new Vector();
                row.add(0, map.get(CUSTOMER_ID));
                row.add(1, map.get(CUSTOMER_NAME));
                row.add(2, map.get(DVD_ID));
                row.add(3, map.get(DVD_NAME));
                row.add(4, map.get(DVD_RENT));
                row.add(5, sdf.format(map.get(ISSUE_DATE)));
                row.add(6, map.get(RENTAL_ID));
                dataRows.add(i, row);
            }// end for
            dm.setDataVector(dataRows, columnIdentifiers);
            jTable1.setModel(dm);

            jTable1.getColumnModel().getColumn(6).setCellRenderer(new ButtonRenderer());

            jTable1.getColumnModel().getColumn(6).setCellEditor(new ButtonEditor(new JCheckBox(), "Return"));

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Exception occured. \n" + e.getMessage() );
        }// end try-catch

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true);}

        public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {

            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(table.getBackground());
            }
            setText("Return");
            return this;
        }
    }// end inner class ButtonRenderer


    class ButtonEditor extends DefaultCellEditor {

         protected JButton button;
         private String label;
         private String btnCaption;
         private boolean isPushed;

        public ButtonEditor(JCheckBox checkBox, String caption) {
            super(checkBox);
            this.btnCaption = caption ;
            button = new JButton();
            button.setOpaque(true);
            button.insets().set(0, 0, 0, 0);
            button.getMargin().left =2;
            button.getMargin().right =2;

            button.setText(caption);
            button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                //System.out.println("2- actionPerformed is called");
                fireEditingStopped();
                int returnId = Integer.valueOf(label.toString());
                String dvdId = (String) dm.getValueAt(jTable1.getSelectedRow(), 2);
                AppContext.dao.returnDVD(returnId, dvdId);
                JOptionPane.showMessageDialog(null, "DVD has returned successfully.");
                ReInit();
            }
            });
        }// end constructor

        public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int row, int column) {
            //System.out.println("1- getTableCellEditorComponent is called");
            if (isSelected) {
                    button.setForeground(table.getSelectionForeground());
                    button.setBackground(table.getSelectionBackground());
                } else {
                    button.setForeground(table.getForeground());
                    button.setBackground(table.getBackground());
                }
            label = (value == null) ? "" : value.toString();

            
            button.setText(btnCaption);
            isPushed = true;
            return button;
        }// end method getTableCellEditorComponent


        public Object getCellEditorValue() {
            isPushed = false;
            return new String(label);
        }

        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }// end inner class ButtonEditor

}
